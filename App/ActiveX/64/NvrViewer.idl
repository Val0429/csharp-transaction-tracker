// NvrViewer.idl : IDL source for NvrViewer
//

// This file will be processed by the MIDL tool to
// produce the type library (NvrViewer.tlb) and marshalling code.

#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";
[
	object,
	uuid(790E30D3-50D9-41B3-8090-622B9AFAE5F0),
	dual,
	nonextensible,
	helpstring("INvrViewer Interface"),
	pointer_default(unique)
]
interface INvrViewer : IDispatch{	
	[propget, id(1), helpstring("property ServerIp")] HRESULT ServerIp([out, retval] BSTR* pVal);
	[propput, id(1), helpstring("property ServerIp")] HRESULT ServerIp([in] BSTR newVal);
	[propget, id(2), helpstring("property ServerUsername")] HRESULT ServerUsername([out, retval] BSTR* pVal);
	[propput, id(2), helpstring("property ServerUsername")] HRESULT ServerUsername([in] BSTR newVal);
	[propget, id(3), helpstring("property ServerPassword")] HRESULT ServerPassword([out, retval] BSTR* pVal);
	[propput, id(3), helpstring("property ServerPassword")] HRESULT ServerPassword([in] BSTR newVal);
	[propget, id(4), helpstring("property ServerPort")] HRESULT ServerPort([out, retval] LONG* pVal);
	[propput, id(4), helpstring("property ServerPort")] HRESULT ServerPort([in] LONG newVal);
	[propget, id(5), helpstring("property ServerUri")] HRESULT ServerUri([out, retval] BSTR* pVal);
	[propput, id(5), helpstring("property ServerUri")] HRESULT ServerUri([in] BSTR newVal);	
	[propget, id(6), helpstring("property Mute")] HRESULT Mute([out, retval] LONG* pVal);
	[propput, id(6), helpstring("property Mute")] HRESULT Mute([in] LONG newVal);
	[propget, id(7), helpstring("property Caption")] HRESULT Caption([out, retval] BSTR* pVal);
	[propput, id(7), helpstring("property Caption")] HRESULT Caption([in] BSTR newVal);	
	[propget, id(8), helpstring("property StretchToFit")] HRESULT StretchToFit([out, retval] LONG* pVal);
	[propput, id(8), helpstring("property StretchToFit")] HRESULT StretchToFit([in] LONG newVal);
	[propget, id(9), helpstring("property AutoReconnect")] HRESULT AutoReconnect([out, retval] LONG* pVal);
	[propput, id(9), helpstring("property AutoReconnect")] HRESULT AutoReconnect([in] LONG newVal);	
	[propget, id(10), helpstring("property ConnectionStatus")] HRESULT ConnectionStatus([out, retval] BSTR* pVal);
	[propput, id(10), helpstring("property ConnectionStatus")] HRESULT ConnectionStatus([in] BSTR newVal);
	[propget, id(11), helpstring("property TimeCode")] HRESULT TimeCode([out, retval] BSTR* pVal);
	[propput, id(11), helpstring("property TimeCode")] HRESULT TimeCode([in] BSTR newVal);
	[propget, id(12), helpstring("property Version")] HRESULT Version([out, retval] BSTR* pVal);
	[propput, id(12), helpstring("property Version")] HRESULT Version([in] BSTR newVal);
	[propget, id(13), helpstring("property AudioTrack")] HRESULT AudioTrack([out, retval] LONG* pVal);
	[propput, id(13), helpstring("property AudioTrack")] HRESULT AudioTrack([in] LONG newVal);	
	[propget, id(14), helpstring("property ShowControl")] HRESULT ShowControl([out, retval] LONG* pVal);
	[propput, id(14), helpstring("property ShowControl")] HRESULT ShowControl([in] LONG newVal);	
	[propget, id(50), helpstring("property ServerSSL")] HRESULT ServerSSL([out, retval] LONG* pVal);
	[propput, id(50), helpstring("property ServerSSL")] HRESULT ServerSSL([in] LONG newVal);
	
	[id(15), helpstring("method SetControlActive")] HRESULT SetControlActive([in] LONG nActive);
	[id(16), helpstring("method EnableFullScreen")] HRESULT EnableFullScreen(void);
	[id(17), helpstring("method EnableMouseDigitalPTZ")] HRESULT EnableMouseDigitalPTZ(void);
	[id(18), helpstring("method DisableMouseDigitalPTZ")] HRESULT DisableMouseDigitalPTZ(void);
	[id(19), helpstring("method EnableMouseMoveEvent")] HRESULT EnableMouseMoveEvent([in] LONG nEnable);
	[id(20), helpstring("method Connect")] HRESULT Connect(void);
	[id(21), helpstring("method Disconnect")] HRESULT Disconnect(void);
	[id(22), helpstring("method SetDateTimeLayout")] HRESULT SetDateTimeLayout([in]BSTR format);
	[id(23), helpstring("method EnableFullScreenEx")] HRESULT EnableFullScreenEx([in]LONG nUseSecondMonitor);
	[id(24), helpstring("method CloseFullScreenWindow")] HRESULT CloseFullScreenWindow(void);
	[id(25), helpstring("method GetNumberOfMonitors")] HRESULT GetNumberOfMonitors([out,retval] LONG* retVal);
	[id(26), helpstring("method SetTextOut")] HRESULT SetTextOut([in] LONG id, [in] LONG nX, [in] LONG nY, [in] BSTR szText, [in] BSTR szFontName, [in] SHORT nBold, [in] LONG nFontWidth, [in] LONG nFontHeight, [in] LONG nFontR, [in] LONG nFontG, [in] LONG nFontB);
	[id(27), helpstring("method SnapShot")] HRESULT SnapShot([in] LONG IFormat, [in] BSTR FileName, [in] LONG ReduplicateTitleBarText, [in] LONG ReduplicateSettextoutText);
	[id(28), helpstring("method SetPlayMode")] HRESULT SetPlayMode([in] LONG isPlay);	
	[id(29), helpstring("method Goto")] HRESULT Goto([in] ULONGLONG timestamp, LONG mode);
	[id(30), helpstring("method SetDecodeI")] HRESULT SetDecodeI([in] LONG bValue);	
	[id(31), helpstring("method EnableMousePTZ")] HRESULT EnableMousePTZ(void);
	[id(32), helpstring("method DisableMousePTZ")] HRESULT DisableMousePTZ(void);
	[id(33), helpstring("method SendPTZCommand")] HRESULT SendPTZCommand([in] BSTR cmd);
	[id(34), helpstring("method SetDisplayTimeZone")] HRESULT SetDisplayTimeZone([in] LONG sec);
	[id(35), helpstring("method GetPTZMode")] HRESULT GetPTZMode([out,retval] LONG* retVal);	
	[id(36), helpstring("method IsFullScreen")] HRESULT IsFullScreen([out,retval] LONG* retVal);
	[id(37), helpstring("method DisplayTitleBar")] HRESULT DisplayTitleBar([in] LONG bDisplay);
	[id(38), helpstring("method EnableMotionDetection")] HRESULT EnableMotionDetection([in] LONG bEnable);
	[id(39), helpstring("method SetupMotionStart")] HRESULT SetupMotionStart(void);
	[id(40), helpstring("method SetupMotionEnd")] HRESULT SetupMotionEnd([out,retval] BSTR *retVal);	
	[id(41), helpstring("method GetFPS")] HRESULT GetFPS([out,retval] LONG* retVal);
	[id(42), helpstring("method Goto2")] HRESULT Goto2([in] BSTR timestamp, LONG mode);

	[id(43), helpstring("method EnableRegion")] HRESULT EnableRegion([in] LONG bEnable);
	[id(44), helpstring("method SetupRegionStart")] HRESULT SetupRegionStart(void);
	[id(45), helpstring("method SetupRegionEnd")] HRESULT SetupRegionEnd([out,retval] BSTR *retVal);	
	[id(46), helpstring("method AddRegion")] HRESULT AddRegion(void);
	[id(47), helpstring("method SetRegions")] HRESULT SetRegions([in]BSTR regions);
	[id(48), helpstring("method NextFrame")] HRESULT NextFrame(void);
	[id(49), helpstring("method PreviousFrame")] HRESULT PreviousFrame(void);
	[id(51), helpstring("method SetImmerVisionCameraDewarped")] HRESULT SetImmerVisionCameraDewarped([in] LONG bDewarped, [in] BSTR type, [in] LONG mountType);		
	[id(52), helpstring("method SetCpuThreshold")] HRESULT SetCpuThreshold([in] LONG threshold);

	[id(53), helpstring("method AdjustBrightness")] HRESULT AdjustBrightness([in] LONG val);	
	[id(54), helpstring("method IsDigitalPtzZoom")] HRESULT IsDigitalPtzZoom([out,retval] LONG* retVal);
};

[
	uuid(1D02BBEA-7A83-4141-8D0B-9722CBDFD94F),
	version(1.0),
	helpstring("NvrViewer 1.0 Type Library")
]
library NvrViewerLib
{
	importlib("stdole2.tlb");
	[
		uuid(B0910414-21A8-43B6-A51B-A0A1A2026303),
		helpstring("_INvrViewerEvents Interface")
	]
	dispinterface _INvrViewerEvents
	{
		properties:
		methods:
			[id(2), helpstring("method OnMouseKeyDoubleClick")] HRESULT OnMouseKeyDoubleClick([in] LONG nBtn, [in] LONG nX, [in] LONG nY);
			[id(3), helpstring("method OnMouseKeyDown")] HRESULT OnMouseKeyDown([in] LONG nBtn, [in] LONG nX, [in] LONG nY);
			[id(4), helpstring("method OnMouseKeyUp")] HRESULT OnMouseKeyUp([in] LONG nBtn, [in] LONG nX, [in] LONG nY);
			[id(5), helpstring("method OnMouseMoveNotify")] HRESULT OnMouseMoveNotify([in] LONG nX, [in] LONG nY);
			[id(DISPID_MOUSEMOVE)] HRESULT MouseMove([in] short Button, [in] short Shift, [in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y);
			[id(6), helpstring("method OnConnect")] HRESULT OnConnect([in] LONG ConnectSuccessful);
			[id(7), helpstring("method OnPlay")] HRESULT OnPlay();
			[id(9), helpstring("method OnDisconnect")] HRESULT OnDisconnect();
			[id(10), helpstring("method OnNetworkLoss")] HRESULT OnNetworkLoss();
			[id(11), helpstring("method OnConnectionRecovery")] HRESULT OnConnectionRecovery([in] BSTR szMediaSourceName);
			
			[id(12), helpstring("method OnTimeCode")] HRESULT OnTimeCode([in] BSTR t);
			[id(13), helpstring("method OnCloseFullScreen")] HRESULT OnCloseFullScreen(void);
			[id(14), helpstring("method OnUpdateBitrate")] HRESULT OnUpdateBitrate([in] LONG k_rate);
	};
	[
		uuid(9D48009D-DD8F-4FC8-AA16-E7B449BE7FB4),
		control,
		helpstring("NvrCtrl Class")
	]
	coclass NvrCtrl
	{
		[default] interface INvrViewer;
		[default, source] dispinterface _INvrViewerEvents;
	};
};
